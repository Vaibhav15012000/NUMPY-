# -*- coding: utf-8 -*-
"""NUMPY MF TRAINING.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EaWukIFAFnj2WT48m501JC8hpuuN8LYK
"""

import numpy as np

a = np.array([10,20,30,40,50,60])

a=np.zeros((2,3))

b=np.ones((2,3))

np.random.random(5)

np.ones((3,3 , 3))

c=np.full(shape=(3,3),fill_value=3)

c

np.random.random((3,3))

a=np.arange(100).reshape(20,5)

a

np.eye(3)

var=np.eye(4)

var

var.dtype

c=np.full(shape=(3, 5) ,fill_value= 5)

c

c.ndim

x=np.random.randint(10, size=(4,4))

x**2

x*2

x-2



"""Slicing of array"""

x[:]

x[0:0:1]

x[0:0]

x[0:4]

x[-1:]

b[0:2,1]   #Select items at rows 0 and 1 in column 1

a[ : :-1]      #Reversed array a

matrix_1 = np.random.randint(100, size = (3,3,3))
display(matrix_1)

matrix_1[0:2]

matrix_1[-1][2][0]

matrix_1[-1][2]

"""Vector Operations:"""



a=np.arange(4).reshape(2,2)

b=np.arange(4).reshape(2,2)

np.dot(a,b)

np.multiply(a,b
          )

np.nan

x.size

x.shape

x.ndim

x.dtype

x.data

"""Uninitialized array creation"""

np.empty((2,3))  # creating an empty array

np.linspace( 1,1,1 )  #evenly sequenced array

x.sum()

x.min()

x.max()

x.cumsum(axis=0)  # cumulative sum along each row

x.cumsum(axis=1)  # cumulative sum along each column

a=np.arange(10).reshape(2,5)

a

a.reshape(5,2)

a.reshape(5,2)

np.array_equal(a, b)

q=np.arange(6).reshape(2,3)

w=np.arange(6).reshape(2,3)

np.array_equal(q,w) # compares two arrays

a==b  #element wise comparison

m=np.array([1,2,3])
np.exp(m)            #Exponentiation

a<2               #element wise comparison

np.sqrt(m)       # Square root

np.sin(m)        #Print sines of an array

np.cos(m)        #Element-wise cosine

np.log(m)        # log for all values

a.mean()

b=np.array([1,2,3,4,5])
np.median(b)                # median is available as a function in numpy****

b.max()

b.min()

z=b.std()   # standard deviation

z

z**(1/2)

h=a.view()   # view array in another variable

h

v=a.copy() # copy array to another variable(deep copy)

v

np.copy(a)   #temporary copying of array

a.sort()

a

k=a.transpose()

k

k.T

a.ravel()  #flattens our array



"""Adding/Removing Elements"""

np.insert(a,0,5)

np.append(a,b)

np.delete(a, [5])



"""Combining Arrays"""

a=np.array([1,2,3])

b=np.array([1,2,3])

np.concatenate((a,b))



"""Splitting Arrays"""

np.hsplit(a,3)   #horizontal split

b = np.array([(1.5,2,3), (4,5,6)])

b

np.vsplit(b,2)



"""Subsetting"""

a[2]

b[1,2]

